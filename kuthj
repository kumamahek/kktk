import React, { useEffect, useRef, useState } from "react";
import { DataSet, Network } from "vis-network/standalone";

const nodeDetails = {
  A: { label: "SOO: A", title: "Level 1" },
  "1": { label: "Downstream 1", title: "Level 2" },
  "2": { label: "Downstream 2", title: "Level 2" },
  "1.1": { label: "Unit 1", title: "Level 3" },
  "1.2": { label: "Unit 2", title: "Level 3" },
  "2.1": { label: "Product A", title: "Level 3" },
  "1.1.1": { label: "Rule 1", title: "Level 4" },
  "1.2.1": { label: "Rule 2", title: "Level 4" },
  "1.2.2": { label: "Rule 3", title: "Level 4" },
};

const allLevels = {
  A: ["1", "2"],
  "1": ["1.1", "1.2"],
  "2": ["2.1"],
  "1.1": ["1.1.1"],
  "1.2": ["1.2.1", "1.2.2"],
};

const App = () => {
  const networkRef = useRef(null);
  const nodes = useRef(new DataSet());
  const edges = useRef(new DataSet());
  const expanded = useRef(new Set());
  const networkInstance = useRef(null);
  const currentLayout = useRef("UD");

  const [maxLevel, setMaxLevel] = useState(4);
  const [searchTerm, setSearchTerm] = useState("");

  const getNodeLevel = (id) => id.split(".").length;

  const expandNode = (id) => {
    if (getNodeLevel(id) >= maxLevel) return;
    const children = allLevels[id] || [];
    children.forEach((child) => {
      if (!nodes.current.get(child)) {
        nodes.current.add({ id: child, ...nodeDetails[child] });
      }
      if (!edges.current.get({ filter: e => e.from === id && e.to === child }).length) {
        edges.current.add({ from: id, to: child });
      }
    });
    expanded.current.add(id);
  };

  const collapseNode = (id) => {
    const children = allLevels[id] || [];
    children.forEach((child) => {
      collapseNode(child);
      if (nodes.current.get(child)) nodes.current.remove(child);
      edges.current.remove({ filter: e => e.from === id && e.to === child });
    });
    expanded.current.delete(id);
  };

  const drawNetwork = () => {
    const data = { nodes: nodes.current, edges: edges.current };
    const options = {
      layout: {
        hierarchical: {
          direction: currentLayout.current,
          sortMethod: "directed",
          levelSeparation: 100,
          nodeSpacing: 200,
        },
      },
      nodes: {
        shape: "box",
        font: { size: 16 },
      },
      edges: {
        arrows: "to",
        smooth: { type: "cubicBezier" },
      },
      interaction: { hover: true },
      physics: false,
    };

    networkInstance.current = new Network(networkRef.current, data, options);
    networkInstance.current.on("click", (params) => {
      const id = params.nodes[0];
      if (!id) return;
      expanded.current.has(id) ? collapseNode(id) : expandNode(id);
    });
  };

  const resetGraph = () => {
    nodes.current.clear();
    edges.current.clear();
    expanded.current.clear();
    nodes.current.add({ id: "A", ...nodeDetails["A"] });
    drawNetwork();
  };

  const expandAll = () => Object.keys(allLevels).forEach(expandNode);

  const toggleLayout = () => {
    currentLayout.current = currentLayout.current === "UD" ? "LR" : "UD";
    drawNetwork();
  };

  const handleSearch = () => {
    if (!searchTerm || !networkInstance.current) return;
    const match = nodes.current.get().find(
      (n) =>
        n.id === searchTerm ||
        (n.label && n.label.toLowerCase().includes(searchTerm.toLowerCase()))
    );
    if (match) {
      networkInstance.current.selectNodes([match.id]);
      networkInstance.current.focus(match.id, { scale: 1.5, animation: true });
    } else {
      alert("Node not found");
    }
  };

  useEffect(() => {
    resetGraph();
  }, []);

  return (
    <div>
      <div style={{ padding: "10px", background: "#eee", display: "flex", gap: "10px", alignItems: "center" }}>
        <button onClick={expandAll}>Expand All</button>
        <button onClick={resetGraph}>Reset</button>
        <button onClick={toggleLayout}>Toggle Layout</button>
        <label>
          Max Levels:
          <select value={maxLevel} onChange={(e) => setMaxLevel(+e.target.value)}>
            {[1, 2, 3, 4, 5].map((lvl) => (
              <option key={lvl} value={lvl}>{lvl}</option>
            ))}
          </select>
        </label>
        <input
          type="text"
          placeholder="Search node..."
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
        />
        <button onClick={handleSearch}>Search</button>
      </div>
      <div ref={networkRef} style={{ height: "90vh" }} />
    </div>
  );
};

export default App;