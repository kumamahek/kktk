import React, { useState, useEffect, useRef } from "react";
import { Graph } from "react-d3-graph";

const nodeColors = {
  Rule: "red",
  Unit: "green",
  Product: "orange",
  App: "blue"
};

const expansionMap = {
  "Rule-1": Array.from({ length: 5 }, (_, i) => ({
    id: `Unit-${i + 1}`,
    type: "Unit",
    description: `Unit ${i + 1} under Rule-1`
  })),
  "Unit-1": [
    { id: "Product-A", type: "Product", description: "Shared product" },
    { id: "App-A", type: "App", description: "App connected to Unit-1" }
  ],
  "Product-A": [
    { id: "App-Shared", type: "App", description: "App shared by Product-A" }
  ]
};

const initialData = {
  nodes: [
    {
      id: "Rule-1",
      type: "Rule",
      color: nodeColors["Rule"],
      description: "Main Rule Node"
    }
  ],
  links: []
};

const GraphViewer = () => {
  const [data, setData] = useState(initialData);
  const [expanded, setExpanded] = useState(new Set());
  const [selectedNode, setSelectedNode] = useState(null);
  const [graphReady, setGraphReady] = useState(false);
  const containerRef = useRef(null);

  useEffect(() => {
    const observer = new ResizeObserver((entries) => {
      for (let entry of entries) {
        if (entry.contentRect.width > 0 && entry.contentRect.height > 0) {
          setGraphReady(true);
        }
      }
    });

    if (containerRef.current) {
      observer.observe(containerRef.current);
    }

    return () => {
      if (containerRef.current) observer.disconnect();
    };
  }, []);

  const handleClickNode = (nodeId) => {
    setSelectedNode(data.nodes.find((n) => n.id === nodeId));
    expanded.has(nodeId) ? collapseNode(nodeId) : expandNode(nodeId);
  };

  const expandNode = (nodeId) => {
    const children = expansionMap[nodeId] || [];
    const newNodes = children
      .filter((child) => !data.nodes.some((n) => n.id === child.id))
      .map((child) => ({
        ...child,
        color: nodeColors[child.type] || "gray"
      }));

    const newLinks = children.map((child) => ({
      source: nodeId,
      target: child.id
    }));

    setData((prev) => ({
      nodes: [...prev.nodes, ...newNodes],
      links: [...prev.links, ...newLinks]
    }));

    setExpanded((prev) => new Set(prev).add(nodeId));
  };

  const collapseNode = (nodeId) => {
    const toRemove = new Set();
    const queue = [nodeId];
    while (queue.length > 0) {
      const current = queue.shift();
      const children = data.links
        .filter((link) => link.source === current)
        .map((link) => link.target);
      children.forEach((child) => {
        queue.push(child);
        toRemove.add(child);
      });
    }

    const newNodes = data.nodes.filter((n) => !toRemove.has(n.id));
    const newLinks = data.links.filter(
      (link) => !toRemove.has(link.source) && !toRemove.has(link.target)
    );
    const newExpanded = new Set(expanded);
    toRemove.forEach((id) => newExpanded.delete(id));
    newExpanded.delete(nodeId);
    setData({ nodes: newNodes, links: newLinks });
    setExpanded(newExpanded);
  };

  const config = {
    height: 800,
    width: 1200,
    directed: true,
    panAndZoom: true,
    staticGraphWithDragAndDrop: graphReady, // <== this is key
    initialZoom: 1.2,
    nodeHighlightBehavior: true,
    d3: {
      gravity: -200,
      linkLength: 250,
      alphaTarget: 0.05
    },
    node: {
      size: 500,
      labelProperty: "id",
      fontSize: 14,
      highlightStrokeColor: "black"
    },
    link: {
      highlightColor: "lightblue"
    }
  };

  return (
    <div ref={containerRef} style={{ display: "flex", gap: "20px" }}>
      <div style={{ flex: 3 }}>
        <h2>Interactive Traceability Graph</h2>
        {graphReady && (
          <Graph
            id="traceability-graph"
            data={data}
            config={config}
            onClickNode={handleClickNode}
            nodeTooltip={(node) => node.description || node.id}
          />
        )}
      </div>
      <div style={{ flex: 1, padding: "1rem", border: "1px solid #ccc" }}>
        <h3>Node Details</h3>
        {selectedNode ? (
          <div>
            <p><strong>ID:</strong> {selectedNode.id}</p>
            <p><strong>Type:</strong> {selectedNode.type}</p>
            <p><strong>Description:</strong> {selectedNode.description}</p>
          </div>
        ) : (
          <p>Click a node to see details.</p>
        )}
      </div>
    </div>
  );
};

export default GraphViewer;