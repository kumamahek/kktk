import React, { useState } from "react";
import ReactFlow, {
  Background,
  Controls,
  MiniMap,
  addEdge,
  useNodesState,
  useEdgesState,
  MarkerType,
} from "reactflow";
import "reactflow/dist/style.css";

const nodeColors = {
  Rule: "#e74c3c",
  Unit: "#27ae60",
  Product: "#e67e22",
  App: "#2980b9",
};

const expansionMap = {
  "Rule-1": Array.from({ length: 5 }, (_, i) => ({
    id: `Unit-${i + 1}`,
    type: "Unit",
    label: `Unit-${i + 1}`,
    data: { tooltip: `Unit ${i + 1} under Rule-1` },
  })),
  "Unit-1": [
    { id: "Product-A", type: "Product", label: "Product-A", data: { tooltip: "Shared product" } },
    { id: "App-A", type: "App", label: "App-A", data: { tooltip: "App-A connected to Unit-1" } },
  ],
  "Product-A": [
    { id: "App-Shared", type: "App", label: "App-Shared", data: { tooltip: "Shared App Node" } },
  ],
};

const createNode = (id, type, label, position, data) => ({
  id,
  position,
  type: "default",
  data: {
    label: <div title={data.tooltip}>{label}</div>,
    ...data,
  },
  style: {
    background: nodeColors[type] || "#ccc",
    color: "#fff",
    padding: 10,
    borderRadius: 5,
    width: 120,
    textAlign: "center",
    border: "1px solid #555",
  },
});

export default function TraceabilityGraph() {
  const [nodes, setNodes, onNodesChange] = useNodesState([
    createNode("Rule-1", "Rule", "Rule-1", { x: 400, y: 100 }, { tooltip: "Main Rule Node" }),
  ]);
  const [edges, setEdges, onEdgesChange] = useEdgesState([]);
  const [expanded, setExpanded] = useState(new Set());

  const handleNodeClick = (event, node) => {
    const parentId = node.id;
    if (expanded.has(parentId)) return;

    const children = expansionMap[parentId] || [];
    const yOffset = 150;
    const parentX = node.position.x;
    const parentY = node.position.y;

    setNodes((prevNodes) => {
      const newNodes = [];
      const newEdges = [];

      children.forEach((child, index) => {
        const exists = prevNodes.find((n) => n.id === child.id);
        if (!exists) {
          const childNode = createNode(
            child.id,
            child.type,
            child.label,
            { x: parentX + index * 130 - (children.length * 65), y: parentY + yOffset },
            child.data
          );
          newNodes.push(childNode);
        }

        newEdges.push({
          id: `e-${parentId}-${child.id}`,
          source: parentId,
          target: child.id,
          markerEnd: { type: MarkerType.ArrowClosed },
          animated: true,
          style: { stroke: "#555" },
        });
      });

      // Add nodes first, then edges
      if (newNodes.length > 0) setEdges((prev) => addEdge(newEdges, prev));

      setExpanded((prev) => new Set(prev).add(parentId));
      return [...prevNodes, ...newNodes];
    });
  };

  return (
    <ReactFlow
      nodes={nodes}
      edges={edges}
      onNodesChange={onNodesChange}
      onEdgesChange={onEdgesChange}
      onNodeClick={handleNodeClick}
      fitView
    >
      <MiniMap />
      <Controls />
      <Background />
    </ReactFlow>
  );
}